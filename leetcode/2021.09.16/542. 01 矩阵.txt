class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
        //int dictX[4] = {1, -1, 0, 0};
        //int dictY[4] = {0, 0, 1, -1};
        // 动态规划
        int n = mat.size();
        int m = mat[0].size();
        vector<vector<int>> dist(n, vector<int>(m, INT_MAX - 500));
        //vector<vector<bool>> seen(n, vector<bool>(m, false));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++){
                if (mat[i][j] == 0)dist[i][j] = 0;
            }
        }
        for (int i = 0; i < n; i++){
            for (int j = 0; j < m; j++){
                if (i >= 1)dist[i][j] = min(dist[i][j], dist[i - 1][j] + 1);
                if (j >= 1)dist[i][j] = min(dist[i][j], dist[i][j - 1] + 1);
            }
        }
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--){
                if (i != n - 1)dist[i][j] = min(dist[i][j], dist[i + 1][j] + 1);
                if (j != m - 1)dist[i][j] = min(dist[i][j], dist[i][j + 1] + 1);
            }
        }
        return dist;

        //多源BFS
        //queue<pair<int, int>> q;
        // for (int i = 0; i < n; i++){
        //     for (int j = 0; j < m; j++){
        //         if (mat[i][j] == 0){
        //             q.emplace(i, j);
        //             seen[i][j] = true;
        //             dist[i][j] = 0;
        //         }
        //     }
        // }
        // while(!q.empty()){
        //     auto [i, j] = q.front();
        //     q.pop();
        //     for (int k = 0; k < 4; k++) {
        //         int nextI = i + dictX[k];
        //         int nextJ = j + dictY[k];
        //         if (nextI >= 0 && nextI < n && nextJ >= 0 && nextJ < m && !seen[nextI][nextJ]){
        //             dist[nextI][nextJ] = dist[i][j] + 1;
        //             seen[nextI][nextJ] = true;
        //             q.emplace(nextI, nextJ);
        //         }
        //     }
        // }
        //return dist;
    }
};