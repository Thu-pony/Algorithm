class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int dictX[4] = {1, -1, 0, 0};
        int dictY[4] = {0, 0, 1, -1};
        int n = grid.size();
        int m = grid[0].size();
        int sum = 0;
        int ans = 0;
        int num = 0;
        vector<vector<bool>> vis(n, vector<bool>(m, false));
        queue<pair<int, int>> q;
        for (int i = 0; i < n; i++){
            for (int j = 0; j < m; j++){
                if (grid[i][j] != 0)sum++;
                if (grid[i][j] == 2){
                    q.emplace(i, j);
                    vis[i][j] = true;
                }
            }
        }
        //if (num == sum)return ans;
        while(!q.empty()){
            int s = q.size();
            for (int x = 0; x < s; x++){
                auto [i, j] = q.front();
                q.pop();
                num++;
                //cout<<"i = "<<i<<" j = "<<j<<endl;
                for (int k = 0; k < 4; k++){
                    int nextI = i + dictX[k];
                    int nextJ = j + dictY[k];
                    if (nextI >= 0 && nextI < n && nextJ >= 0 && nextJ < m && !vis[nextI][nextJ] && grid[nextI][nextJ]){
                        vis[nextI][nextJ] = true;
                        q.emplace(nextI, nextJ);
                    }
                }
            }
            if (num == sum)return ans;
            ans++;
        }
        //cout<<"num = "<<num<<" sum = "<<sum<<" ans = "<<ans<<endl;
        if (num == sum) return ans;
        return -1;

    }
};