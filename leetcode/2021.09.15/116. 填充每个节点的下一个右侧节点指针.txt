/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    void dfs(Node* root){
        if (!root->left)return;
        root->left->next = root->right;
        if (root->next && root->next->left)root->right->next = root->next->left;
        dfs(root->left);
        dfs(root->right);
    }
    Node* connect(Node* root) {
        if (root == NULL)return NULL;
        dfs(root);
        // BFS
        // queue<Node*> q;
        // q.push(root);
        // while(!q.empty()){
        //     Node* temp = q.front();
        //     int s = q.size();
        //     q.pop();
        //     if (temp->left)q.push(temp->left);
        //     if (temp->right)q.push(temp->right);
        //     for (int i = 1; i < s; i++){
        //         Node* now = q.front();
        //         q.pop();
        //         temp->next = now;
        //         if (now->left)q.push(now->left);
        //         if (now->right)q.push(now->right);
        //         temp = now;
        //     }
        // }
        return root;
    }
};