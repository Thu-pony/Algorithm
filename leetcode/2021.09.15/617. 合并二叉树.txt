/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int i = 0;
    void dfs(TreeNode*& root, TreeNode* root1, TreeNode* root2) {
        //cout<<"i = "<<++i<<endl;
        if (!root1 && !root2)return ;
        root = new TreeNode();
        // bool isRoot1 = (root1 == nullptr);
        // bool isRoot2 = (root2 == nullptr);
        // if (!isRoot1)cout<<"root1->val = "<<root1->val<<endl;
        // if (!isRoot2)cout<<"root2->val = "<<root2->val<<endl;
        if (!root1 && root2)root->val = root2->val;
        else if (root1 && !root2)root->val = root1->val;
        else root->val = root1->val + root2->val;
        dfs(root->left,root1 == nullptr?nullptr:root1->left, root2 == nullptr?nullptr:root2->left);
        dfs(root->right,root1 == nullptr?nullptr:root1->right, root2 == nullptr?nullptr:root2->right);
    }
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        TreeNode* root = nullptr;
        dfs(root, root1, root2);
        return root;
    }
};