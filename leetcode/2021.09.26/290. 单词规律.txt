class Solution {
public:
    bool wordPattern(string pattern, string s) {
        int n = s.size();
        unordered_map<char, string> mp;
        unordered_map<string, char> mp1;
        int i = 0;
        int j = 0;
        int k = 0;
        for (int i = 0; i < n; i++){
            if (s[i] == ' '){
                string temp = s.substr(j, i - j);
                char c = pattern[k++];
                if (!mp1.count(temp))mp1[temp] = c;
                if (mp1.count(temp) && mp1[temp] != c)return false;
                if (!mp.count(c))mp[c] = temp;
                if (mp.count(c) && mp[c] != temp)return false; 
                j = i + 1;
            }
        }
        string temp = s.substr(j, n);
        char c = pattern[k++];
        if (!mp1.count(temp))mp1[temp] = c;
        if (mp1.count(temp) && mp1[temp] != c)return false;
        if (!mp.count(c))mp[c] = temp;
        if (mp.count(c) && mp[c] != temp)return false;
        return k == pattern.size();
    }
};